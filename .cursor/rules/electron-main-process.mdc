# Electron主进程开发规范

## 主进程架构

### 1. 主进程文件结构
- [index.ts](mdc:src/main/index.ts) - 主进程入口，应用生命周期管理
- tray.ts - 系统托盘管理
- window.ts - 窗口管理
- ipc/ - IPC通信处理

### 2. 应用生命周期管理
```typescript
import { app, BrowserWindow, Tray, Menu } from 'electron';
import { join } from 'path';
import { electronApp, optimizer } from '@electron-toolkit/utils';

// 应用初始化
app.whenReady().then(() => {
  // 设置应用用户模型ID
  electronApp.setAppUserModelId('com.wannianli.app');
  
  // 创建系统托盘
  createTray();
  
  // 创建主窗口
  createMainWindow();
  
  // 注册IPC处理器
  registerIpcHandlers();
});

// 应用退出处理
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});
```

## 窗口管理规范

### 1. 窗口创建和管理
```typescript
import { BrowserWindow, screen } from 'electron';
import { join } from 'path';

let mainWindow: BrowserWindow | null = null;
let popupWindow: BrowserWindow | null = null;

const createMainWindow = (): void => {
  // 获取主显示器信息
  const primaryDisplay = screen.getPrimaryDisplay();
  const { width, height } = primaryDisplay.workAreaSize;
  
  mainWindow = new BrowserWindow({
    width: Math.min(900, width * 0.8),
    height: Math.min(670, height * 0.8),
    show: false,
    autoHideMenuBar: true,
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false,
      nodeIntegration: false,
      contextIsolation: true
    },
    // macOS特定配置
    ...(process.platform === 'darwin' ? {
      titleBarStyle: 'hiddenInset'
    } : {})
  });
  
  // 窗口事件处理
  mainWindow.on('ready-to-show', () => {
    mainWindow?.show();
  });
  
  mainWindow.on('closed', () => {
    mainWindow = null;
  });
  
  // 加载页面
  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL']);
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'));
  }
};

const createPopupWindow = (): void => {
  popupWindow = new BrowserWindow({
    width: 400,
    height: 500,
    show: false,
    frame: false,
    resizable: false,
    alwaysOnTop: true,
    skipTaskbar: true,
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false,
      nodeIntegration: false,
      contextIsolation: true
    }
  });
  
  popupWindow.on('blur', () => {
    popupWindow?.hide();
  });
};
```

### 2. 窗口位置计算
```typescript
import { screen } from 'electron';

const calculatePopupPosition = (): { x: number; y: number } => {
  const trayBounds = tray?.getBounds();
  const displayBounds = screen.getDisplayMatching(trayBounds || {}).workArea;
  
  if (!trayBounds) {
    return { x: 0, y: 0 };
  }
  
  const windowWidth = 400;
  const windowHeight = 500;
  
  // 计算弹出窗口位置
  let x = Math.round(trayBounds.x + (trayBounds.width / 2) - (windowWidth / 2));
  let y = Math.round(trayBounds.y + trayBounds.height);
  
  // 确保窗口不超出屏幕边界
  if (x + windowWidth > displayBounds.x + displayBounds.width) {
    x = displayBounds.x + displayBounds.width - windowWidth;
  }
  
  if (y + windowHeight > displayBounds.y + displayBounds.height) {
    y = displayBounds.y + displayBounds.height - windowHeight;
  }
  
  return { x, y };
};
```

## 系统托盘管理

### 1. 托盘创建和配置
```typescript
import { Tray, Menu, nativeImage } from 'electron';
import { join } from 'path';

let tray: Tray | null = null;

const createTray = (): void => {
  // 创建托盘图标
  const iconPath = join(__dirname, '../../resources/tray-icon.png');
  const icon = nativeImage.createFromPath(iconPath);
  
  tray = new Tray(icon);
  tray.setToolTip('万年历');
  
  // 设置托盘菜单
  const contextMenu = Menu.buildFromTemplate([
    {
      label: '显示日历',
      click: () => {
        showPopupWindow();
      }
    },
    {
      label: '设置',
      click: () => {
        openSettingsWindow();
      }
    },
    { type: 'separator' },
    {
      label: '退出',
      click: () => {
        app.quit();
      }
    }
  ]);
  
  tray.setContextMenu(contextMenu);
  
  // 托盘点击事件
  tray.on('click', () => {
    showPopupWindow();
  });
  
  // 托盘右键事件
  tray.on('right-click', () => {
    tray?.popUpContextMenu();
  });
};

const showPopupWindow = (): void => {
  if (!popupWindow) {
    createPopupWindow();
  }
  
  const position = calculatePopupPosition();
  popupWindow?.setPosition(position.x, position.y);
  popupWindow?.show();
  popupWindow?.focus();
};
```

## IPC通信规范

### 1. IPC处理器注册
```typescript
import { ipcMain } from 'electron';

const registerIpcHandlers = (): void => {
  // 事件相关IPC
  ipcMain.handle('events:get', async (event, date: string) => {
    return await getEvents(new Date(date));
  });
  
  ipcMain.handle('events:add', async (event, eventData: EventData) => {
    return await addEvent(eventData);
  });
  
  ipcMain.handle('events:update', async (event, id: string, eventData: EventData) => {
    return await updateEvent(id, eventData);
  });
  
  ipcMain.handle('events:delete', async (event, id: string) => {
    return await deleteEvent(id);
  });
  
  // 设置相关IPC
  ipcMain.handle('settings:get', async () => {
    return await getSettings();
  });
  
  ipcMain.handle('settings:update', async (event, settings: AppSettings) => {
    return await updateSettings(settings);
  });
  
  // 农历相关IPC
  ipcMain.handle('lunar:get', async (event, date: string) => {
    return await getLunarDate(new Date(date));
  });
  
  // 假期数据相关IPC
  ipcMain.handle('holidays:get', async () => {
    return await getHolidays();
  });
  
  ipcMain.handle('holidays:update', async () => {
    return await updateHolidays();
  });
};
```

### 2. 错误处理
```typescript
const safeIpcHandler = <T>(
  handler: (...args: any[]) => Promise<T>
) => {
  return async (event: Electron.IpcMainInvokeEvent, ...args: any[]) => {
    try {
      const result = await handler(...args);
      return { success: true, data: result };
    } catch (error) {
      console.error('IPC handler error:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      };
    }
  };
};

// 使用安全处理器
ipcMain.handle('events:get', safeIpcHandler(async (date: string) => {
  return await getEvents(new Date(date));
}));
```

## 数据存储管理

### 1. 本地存储配置
```typescript
import Store from 'electron-store';

// 应用设置存储
const settingsStore = new Store<AppSettings>({
  name: 'settings',
  defaults: {
    autoStart: false,
    theme: 'light',
    language: 'zh-CN',
    notifications: true
  }
});

// 事件数据存储
const eventsStore = new Store<Event[]>({
  name: 'events',
  defaults: []
});

// 假期数据存储
const holidaysStore = new Store<Holiday[]>({
  name: 'holidays',
  defaults: []
});

// 数据访问函数
export const getSettings = (): AppSettings => {
  return settingsStore.store;
};

export const updateSettings = (settings: Partial<AppSettings>): void => {
  settingsStore.set(settings);
};

export const getEvents = (): Event[] => {
  return eventsStore.store;
};

export const addEvent = (event: Event): void => {
  const events = eventsStore.store;
  events.push(event);
  eventsStore.set(events);
};
```

## 安全考虑

### 1. 内容安全策略
```typescript
const setSecurityHeaders = (window: BrowserWindow): void => {
  window.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';"
        ]
      }
    });
  });
};
```

### 2. 权限管理
```typescript
const requestPermissions = async (): Promise<void> => {
  if (process.platform === 'darwin') {
    // macOS权限请求
    const accessibility = await systemPreferences.isTrustedAccessibilityClient(false);
    if (!accessibility) {
      // 显示权限请求对话框
      dialog.showMessageBox({
        type: 'info',
        title: '需要辅助功能权限',
        message: '万年历需要辅助功能权限来支持全局快捷键。请在系统偏好设置中启用。',
        buttons: ['确定']
      });
    }
  }
};
```

## 自动更新配置

### 1. 更新检查
```typescript
import { autoUpdater } from 'electron-updater';

const setupAutoUpdater = (): void => {
  autoUpdater.autoDownload = false;
  
  autoUpdater.on('checking-for-update', () => {
    console.log('检查更新中...');
  });
  
  autoUpdater.on('update-available', (info) => {
    console.log('发现新版本:', info);
    // 通知渲染进程
    mainWindow?.webContents.send('update:available', info);
  });
  
  autoUpdater.on('update-not-available', () => {
    console.log('当前已是最新版本');
  });
  
  autoUpdater.on('error', (err) => {
    console.error('更新错误:', err);
  });
  
  autoUpdater.on('download-progress', (progressObj) => {
    mainWindow?.webContents.send('update:progress', progressObj);
  });
  
  autoUpdater.on('update-downloaded', () => {
    mainWindow?.webContents.send('update:downloaded');
  });
  
  // 定期检查更新
  setInterval(() => {
    autoUpdater.checkForUpdates();
  }, 24 * 60 * 60 * 1000); // 24小时检查一次
};
```
