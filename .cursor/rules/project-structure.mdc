# 万年历应用项目结构规范

## 项目概述
这是一个基于 Electron + React + TypeScript 的万年历桌面应用，支持农历、节日、个人事件等功能。

## 技术栈
- **主框架**: Electron
- **前端**: React 19 + TypeScript
- **构建工具**: electron-vite
- **UI样式**: Tailwind CSS
- **日期处理**: dayjs + lunar-javascript
- **数据存储**: electron-store
- **网络请求**: axios

## 项目结构规范

### 进程分层
- [src/main](mdc:src/main): Electron主进程，负责系统级功能
- [src/preload](mdc:src/preload): 预加载脚本，安全地暴露API
- [src/renderer](mdc:src/renderer): 渲染进程，实现用户界面

### 主进程结构 (src/main/) - 简化版
```
src/main/
├── index.ts                 # 主进程入口
├── window.ts               # 窗口管理
├── tray.ts                 # 系统托盘
├── settings.ts             # 设置管理
├── ipc.ts                  # 所有IPC通信处理
├── constants.ts            # 常量定义
└── dateIconManager.ts      # 图标管理
```

### 预加载脚本结构 (src/preload/) - 简化版
```
src/preload/
├── index.ts                # 预加载脚本入口
└── api.ts                  # 所有API接口（窗口、托盘、设置）
```

### 渲染进程结构 (src/renderer/) - 简化版
```
src/renderer/
├── index.html              # 主HTML文件
└── src/
    ├── main.tsx           # 应用入口
    ├── App.tsx            # 主应用组件
    ├── components/         # React组件
    │   ├── Calendar/      # 日历组件
    │   ├── Settings/      # 设置组件
    │   └── ui/            # 通用UI组件
    ├── hooks/              # 自定义Hooks
    │   ├── useCalendar.ts
    │   ├── useLunarDate.ts
    │   ├── useSettings.ts
    │   ├── useTray.ts
    │   └── useWindow.ts
    ├── utils/              # 工具函数
    │   ├── classUtils.ts
    │   ├── dateUtils.ts
    │   └── lunarUtils.ts
    ├── constants/          # 常量定义
    │   ├── icons.ts
    │   └── window.ts
    ├── types.ts            # 所有类型定义
    └── assets/             # 静态资源
        ├── tailwind.css
        ├── main.css
        └── base.css
```

### 功能模块组织规范

每个功能模块应包含：
```
features/calendar/
├── components/             # 模块专用组件
│   ├── CalendarGrid.tsx
│   ├── CalendarHeader.tsx
│   └── CalendarDay.tsx
├── hooks/                  # 模块专用钩子
│   ├── useCalendar.ts
│   └── useCalendarNavigation.ts
├── stores/                 # 模块状态管理
│   └── calendar-store.ts
├── utils/                  # 模块工具函数
│   ├── calendar-utils.ts
│   └── navigation-utils.ts
└── types.ts               # 模块类型定义
```

### 配置文件
- [package.json](mdc:package.json) - 项目依赖和脚本
- [electron.vite.config.ts](mdc:electron.vite.config.ts) - 构建配置
- [tsconfig.json](mdc:tsconfig.json) - TypeScript配置
- [eslint.config.mjs](mdc:eslint.config.mjs) - ESLint配置
- [electron-builder.yml](mdc:electron-builder.yml) - 打包配置
- [tailwind.config.js](mdc:tailwind.config.js) - Tailwind CSS配置
- [postcss.config.js](mdc:postcss.config.js) - PostCSS配置

⚠️ **重要**: 配置文件必须使用正确的模块语法，详见 [配置文件编写规范](mdc:.cursor/rules/config-files-standards.mdc)

## 命名规范

### 文件命名规范
- **组件文件/目录**: 使用 PascalCase，如 `Calendar.tsx`, `EventForm/`
- **工具/配置文件**: 使用 camelCase，如 `dateUtils.ts`, `lunarUtils.ts`
- **样式文件**: 使用 camelCase，如 `calendarStyles.css`
- **类型文件**: 使用 camelCase + .ts，如 `calendarTypes.ts`
- **常量文件**: 使用 UPPER_SNAKE_CASE，如 `CONSTANTS.ts`

### 目录命名规范
- **功能模块**: 使用 camelCase，如 `calendar/`, `eventManagement/`
- **组件目录**: 使用 PascalCase，如 `Calendar/`, `EventForm/`
- **工具目录**: 使用 camelCase，如 `utils/`, `hooks/`

## 开发指导

### 开发优先级
1. 系统托盘和窗口管理
2. 日历核心功能（农历、节日）
3. 事件管理功能
4. 数据存储和同步
5. UI/UX 优化
6. 系统集成（自启动、更新）

### 关键规范文档
- [Tailwind CSS v4 迁移指南](mdc:.cursor/rules/tailwind-v4-migration.mdc) - v4完整迁移方案 🚀
- [图标使用规范](mdc:.cursor/rules/icon-usage-guide.mdc) - Lucide React图标方案 🎨
- [macOS 菜单栏应用规范](mdc:.cursor/rules/macos-menubar-app.mdc) - 菜单栏应用开发指南 🍎
- [动态日期图标规范](mdc:.cursor/rules/dynamic-date-icon.mdc) - 智能日期图标实现 📅
- [配置文件编写规范](mdc:.cursor/rules/config-files-standards.mdc) - 避免模块语法错误 ⚠️
- [TypeScript 代码格式规范](mdc:.cursor/rules/typescript-code-style.mdc) - 统一代码风格 🎨
- [开发工作流程规范](mdc:.cursor/rules/development-workflow.mdc) - 代码提交流程 🔄
- [TypeScript 代码规范](mdc:.cursor/rules/typescript-standards.mdc) - 代码质量标准
- [Tailwind CSS 样式规范](mdc:.cursor/rules/tailwind-styling.mdc) - UI样式开发指导
- [模块组织规范](mdc:.cursor/rules/module-organization.mdc) - 代码架构指导
- [数据存储方案对比](mdc:.cursor/rules/data-storage-comparison.mdc) - 技术选型分析 📊
- [常见问题排查指南](mdc:.cursor/rules/troubleshooting-guide.mdc) - 问题快速解决 🔧
