# 动态日期图标开发规范

## 概述

本文档规范了动态日期菜单栏图标的实现标准，该功能可以在菜单栏/系统托盘显示当前日期数字。

## 设计原则

### 1. 视觉一致性

- **跨平台统一**: 不同操作系统保持相同的视觉风格
- **清晰度优先**: 像素级精确的数字显示
- **简洁设计**: 专注于日期显示，避免过度装饰
- **适配系统**: 符合各平台的图标设计规范

### 2. 功能特性

- **实时更新**: 自动检测日期变化并更新图标
- **智能缓存**: 避免重复生成相同日期的图标
- **降级方案**: 多层降级确保图标正常显示
- **性能优化**: 高效的像素绘制算法

## 技术实现

### 1. 图标生成算法

```typescript
// 主要函数接口
export function createDateMenuBarIcon(
  platform: string = process.platform, 
  date?: Date
): NativeImage

// 平台特定尺寸
const size = platform === 'darwin' ? 18 : 16
```

### 2. 像素字体系统

#### 数字字体设计 (5x7像素)
```typescript
const digitPatterns = {
  '0': [
    '01110',
    '10001', 
    '10001',
    '10001',
    '10001',
    '10001',
    '01110'
  ],
  // ... 其他数字
}
```

#### 布局算法
- **单数字**: 居中显示 (1-9)
- **双数字**: 并排显示，1像素间距 (10-31)
- **位置计算**: 动态居中算法适配不同图标尺寸

### 3. 平台适配

| 平台 | 尺寸 | 特殊处理 |
|------|------|----------|
| **macOS** | 18x18px | 菜单栏优化，支持明暗主题 |
| **Windows** | 16x16px | 系统托盘标准尺寸 |
| **Linux** | 16x16px | 桌面环境兼容性 |

### 4. 自动更新机制

```typescript
// 定时检查 (每小时)
setInterval(() => {
  if (lastIconUpdateDate && shouldUpdateIcon(lastIconUpdateDate)) {
    updateTrayIcon()
  }
}, 60 * 60 * 1000)

// 日期变化检测
export function shouldUpdateIcon(lastUpdateDate: Date): boolean {
  const now = new Date()
  return (
    lastUpdateDate.getDate() !== now.getDate() ||
    lastUpdateDate.getMonth() !== now.getMonth() ||
    lastUpdateDate.getFullYear() !== now.getFullYear()
  )
}
```

## 图标绘制流程

### 1. 画布初始化
```typescript
// 创建RGBA画布
const data = new Uint8Array(size * size * 4)

// 透明背景填充
for (let i = 0; i < data.length; i += 4) {
  data[i] = 0     // R
  data[i + 1] = 0 // G  
  data[i + 2] = 0 // B
  data[i + 3] = 0 // A (透明)
}
```

### 2. 背景绘制
- **圆角矩形**: 模拟日历外观
- **装订孔**: 顶部两个小圆点
- **颜色方案**: 灰色背景 + 黑色文字

### 3. 数字渲染
- **获取日期**: `new Date().getDate()`
- **选择字体**: 从预定义像素字体中选择
- **位置计算**: 根据数字个数动态居中
- **像素绘制**: 逐像素绘制数字图案

### 4. 图像生成
```typescript
// 从像素数据创建图像
const image = nativeImage.createFromBuffer(Buffer.from(canvas))

// 验证和降级
if (image.isEmpty()) {
  return createFallbackIcon(size, dayOfMonth)
}
```

## 降级方案

### 1. 三层降级策略

1. **主方案**: 完整的像素绘制图标
2. **降级方案1**: 简化的背景+文字图标
3. **最终降级**: 空图标（系统默认）

### 2. 错误处理

```typescript
try {
  const image = nativeImage.createFromBuffer(Buffer.from(canvas))
  return image
} catch (error) {
  console.error('❌ 创建日期菜单栏图标失败:', error)
  return createFallbackIcon(size, dayOfMonth)
}
```

## 性能优化

### 1. 缓存机制
- **日期缓存**: 同一日期只生成一次图标
- **定时清理**: 避免内存泄漏
- **按需生成**: 仅在需要时创建图标

### 2. 算法优化
- **快速像素操作**: 直接操作Uint8Array
- **简化计算**: 优化数学运算
- **内存管理**: 及时释放临时数据

### 3. 调试信息
```typescript
console.log(`📅 创建日期图标: ${dayOfMonth} (${size}x${size}px)`)
console.log('✅ 图标已调整为 18x18 像素')
console.log('⏰ 图标更新定时器已设置')
```

## 集成指南

### 1. 基本使用
```typescript
// 创建当前日期图标
const icon = createDateMenuBarIcon()

// 创建指定日期图标  
const customIcon = createDateMenuBarIcon('darwin', new Date('2024-12-25'))

// 检查更新需求
if (shouldUpdateIcon(lastUpdate)) {
  updateTrayIcon()
}
```

### 2. 托盘集成
```typescript
// 在托盘创建时使用
const iconImage = createDateMenuBarIcon(process.platform)
tray = new Tray(iconImage)

// 设置自动更新
setupIconUpdateTimer()
```

### 3. 手动刷新
```typescript
// 提供给用户的刷新功能
export function refreshTrayIcon(): void {
  updateTrayIcon()
}
```

## 测试策略

### 1. 单元测试
- [ ] 数字字体渲染测试
- [ ] 日期变化检测测试
- [ ] 平台适配测试
- [ ] 降级方案测试

### 2. 集成测试
- [ ] 托盘图标显示测试
- [ ] 自动更新功能测试
- [ ] 跨平台兼容性测试
- [ ] 性能压力测试

### 3. 用户测试
- [ ] 图标清晰度评估
- [ ] 不同分辨率显示测试
- [ ] 长期运行稳定性测试

## 最佳实践

### 1. 开发建议
- 优先考虑清晰度和可读性
- 保持跨平台一致的用户体验
- 实现健壮的错误处理
- 提供详细的调试信息

### 2. 维护建议
- 定期检查平台兼容性
- 监控性能和内存使用
- 收集用户反馈进行优化
- 保持文档同步更新

### 3. 扩展性考虑
- 支持自定义日期格式
- 支持多语言数字显示
- 支持主题颜色自定义
- 支持动画效果

## 故障排除

### 1. 常见问题
- **图标不显示**: 检查平台支持和权限
- **图标模糊**: 验证像素对齐和尺寸
- **更新失败**: 检查定时器和日期检测
- **内存泄漏**: 检查缓存清理机制

### 2. 调试工具
```typescript
// 开启详细日志
console.log(`📅 创建日期图标: ${dayOfMonth}`)
console.log(`📂 图标尺寸: ${size}x${size}px`)
console.log(`⏰ 下次检查时间: ${nextCheckTime}`)
```

### 3. 性能监控
- 图标生成耗时统计
- 内存使用情况监控
- 更新频率统计
- 错误率监控

## 相关资源

- [Electron NativeImage API](https://www.electronjs.org/docs/api/native-image)
- [像素字体设计指南](https://en.wikipedia.org/wiki/Pixel_art)
- [跨平台图标设计规范](https://developer.apple.com/design/human-interface-guidelines/)
- [系统托盘最佳实践](https://docs.microsoft.com/en-us/windows/apps/design/shell/tiles-and-notifications/)